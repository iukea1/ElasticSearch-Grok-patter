input {
    udp {
        port => 5114
    }
}


filter {

    #Gets headers
    grok {
        match => [
            "message", "<%{INT}>%{WORD}%{SPACE}%{INT}%{SPACE}%{INT}:%{INT}:%{INT}%{SPACE}%{DATA:Hostname}:%{SPACE}%{GREEDYDATA:message}",
            "message", "<%{INT}>%{MONTH} %{MONTHDAY} %{YEAR} %{TIME}: %{DATA}-%{INT:event.severity}-%{WORD:event.id}: %{GREEDYDATA:message}"
        ]
        overwrite => ["message"]
    }

    #If it's a URL log
    if "URLReputation" in [message] {
        
        if "URL: " in [message] {
            grok {
                match => [
                    "message", "%{DATA:message}URL: %{GREEDYDATA:URL}$"
                ]
                overwrite => ["message"]
                
            }
        }

        kv {
          value_split => ":"
          field_split => ", "
        }
        
        mutate {
            add_tag => ["URL"]
        }
    
    }

    else if "IOC" in [message] {
        grok {
            match => [
                "message", "<*- Host IOC Set From \"%{DATA:ioc.host}\" %{DATA}-*> IP Address: %{IP:ioc.ip} Category: %{DATA:ioc.category}; Event Type: %{DATA:ioc.event_type}$"

            ]

        }

    }
    
    #If it's a client update
    else if "Client Update From" in [message] or "New Client From" in [message] or "Client Timeout From" in [message]{
    
    
        grok {
            match => [
                "message", "<*- Client Update From \"%{DATA:ClientSource}\" %{WORD} %{WORD} %{SYSLOGTIMESTAMP} %{INT} %{WORD} -\*>%{SPACE} IP Address: %{IPORHOST:Client} %{DATA:ClientDestination}$",
                "message", "<*- New Client From \"%{DATA:ClientSource}\" %{WORD} %{WORD} %{SYSLOGTIMESTAMP} %{INT} %{WORD} -\*>%{SPACE} IP Address: %{IPORHOST:Client} %{DATA:ClientDestination}$",
                "message", "<*- Client Timeout From %{DATA:ClientSource} at %{WORD} %{SYSLOGTIMESTAMP} %{INT} %{WORD} -\*>%{SPACE} IP Address: %{IPORHOST:Client} %{DATA:ClientDestination}$",
                "message", "<*- NETBIOS Name Change From \"%{DATA:ClientSource}\" at %{WORD} %{SYSLOGTIMESTAMP} %{INT} %{WORD} -\*>%{SPACE} IP Address: %{IPORHOST:Client} NETBIOS Name\: %{GREEDYDATA:host}",
                "message", "<*- Client Timeout From %{DATA:ClientSource} at %{WORD} %{SYSLOGTIMESTAMP} %{INT} %{WORD} -\*>%{SPACE} MAC Address: %{MAC:mac} %{DATA} %{GREEDYDATA:app_protocol}"
            ]
        
        }
    
        mutate {
            add_tag => ["Client"]
        }
        
    
    }
    
    #For actual messages that can be alerted on
    else if "Impact" in [message] and "Classification" in [message] {
        grok {
            match => [
                "message", "%{DATA} %{WORD:AttackFindMethod}: %{DATA:AttackType} \[Impact: %{DATA:Impact}\] From \"%{DATA}\" at %{WORD} %{SYSLOGTIMESTAMP} %{INT} %{WORD} \[Classification: %{DATA:Classification}\] \[Priority: %{INT:Priority}\] \{%{WORD:Protocol}\} %{IPORHOST:SourceIP}:%{INT:SourcePort} \(%{DATA:SourceCountry}\)->%{IPORHOST:DestinationIP}:%{INT:DestinationPort} \(%{DATA:DestinationCountry}\)",
                "message", "%{DATA} \"%{DATA:AttackType}\" \[Impact: %{DATA:Impact}\] From \"%{DATA}\" at %{WORD} %{SYSLOGTIMESTAMP} %{INT} %{WORD} \[Classification: %{DATA:Classification}\] \[Priority: %{INT:Priority}\] \{%{WORD:Protocol}\} %{IPORHOST:SourceIP}:%{INT:SourcePort} \(%{DATA:SourceCountry}\)->%{IPORHOST:DestinationIP}:%{INT:DestinationPort} \(%{DATA:DestinationCountry}\)"
            ]
        }
    }


    
    #Drops if matches condition
    else if "Additional MAC Detected" in [message] or "MAC Information Change" in [message] or "New OS From" in [message] or "VLAN Tag Information" in [message] or "Host Timeout From Local Appliance" in [message] or "NETBIOS Name Change" in [message]{
        drop{ }
    }
    
    else {

        if ![event][id] {
            grok {
                match => [
                    "message", "\[Classification: %{DATA:Classification}\] \[Priority: %{NUMBER:Priority}\] \{%{WORD:Protocol}\} %{DATA:LocalAddress}:%{NUMBER:LocalPort} \(%{DATA}\)->%{DATA:RemoteAddress}:%{NUMBER:RemotePort} \(%{DATA:Country}\)",
                    "message", "%{DATA:application}\: Protocol\: %{WORD:protocol}\, SrcIP\: %{IPORHOST:SourceIP}\, DstIP\: %{IPORHOST:DestinationIP}\, SrcPort\: %{INT:SourcePort}\, DstPort\: %{INT:DestinationPort}\, IngressInterface\: %{WORD:ingress_int}\, EgressInterface\: %{WORD:egress_int}\, IngressZone\: %{WORD:ingress_zone}\, EgressZone\: %{WORD:egress_zone}\, Priority\: %{INT:Priority}\, DE\: %{DATA:detection_engine} \(%{DATA:engine_guid}\)\, Policy\: %{DATA:policy}\, GID\: %{INT:gid}\, SID\: %{INT:sid}\, Revision\: %{INT:revision}\, Message\: \"%{DATA:message}\"\, Classification\: %{DATA:traffic_classification}\, Client\: %{WORD:client}\, ApplicationProtocol\: %{WORD:app_protocol}\, ACPolicy\: %{WORD:ac_policy}\, NAPPolicy\: %{DATA:net_acc_policy}"
                ]
            }
        }
    }

    if ![event][id] {
        #GeoIP on remote sources and destinations
        if [SrcIP] !~ /^10./ and [src_ip] !~ /^192.168/ and [SrcIP] !~ /^2[2-5][4-9]/ and [SrcIP] !~ /(172)\.(1[6-9]|2[0-9]|3[0-1])(\.([2][0-5][0-5]|[1][0-9][0-9]|[1-9][0-9]|[0-9])){2}/ {
            geoip {
                source => "SrcIP"
                target => "SrcGeoIP"
            }
        }
        if [DstIP] !~ /^10./ and [dst_ip] !~ /^192.168/ and [DstIP] !~ /^2[2-5][4-9]/ and [DstIP] !~ /(172)\.(1[6-9]|2[0-9]|3[0-1])(\.([2][0-5][0-5]|[1][0-9][0-9]|[1-9][0-9]|[0-9])){2}/ {
            geoip {
                source => "DstIP"
                target => "DstGeoIP"
            }
        }
    }

}
output {

    elasticsearch {
        user => "elastic"
        password => "[PASSWORD]"
        hosts => ["elastic-data01.[DOMAIN].local:9200","elastic-data02.[DOMAIN].local:9200","elastic-data03.[DOMAIN].local:9200"]
        
        index => "firepower-0.1-%{+YYYY.ww}"
        manage_template => true
        template_overwrite => true
        template => "/etc/logstash/templates/firepower.json"
    }

}
